[{"name":"BRACKETS","description":"io.github.techouse.qskotlin.enums.ListFormat.BRACKETS","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-b-r-a-c-k-e-t-s/index.html","searchKeys":["BRACKETS","BRACKETS","io.github.techouse.qskotlin.enums.ListFormat.BRACKETS"]},{"name":"CHARSET","description":"io.github.techouse.qskotlin.enums.Sentinel.CHARSET","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/-c-h-a-r-s-e-t/index.html","searchKeys":["CHARSET","CHARSET","io.github.techouse.qskotlin.enums.Sentinel.CHARSET"]},{"name":"COMBINE","description":"io.github.techouse.qskotlin.enums.Duplicates.COMBINE","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/-c-o-m-b-i-n-e/index.html","searchKeys":["COMBINE","COMBINE","io.github.techouse.qskotlin.enums.Duplicates.COMBINE"]},{"name":"COMMA","description":"io.github.techouse.qskotlin.enums.ListFormat.COMMA","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-c-o-m-m-a/index.html","searchKeys":["COMMA","COMMA","io.github.techouse.qskotlin.enums.ListFormat.COMMA"]},{"name":"FIRST","description":"io.github.techouse.qskotlin.enums.Duplicates.FIRST","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/-f-i-r-s-t/index.html","searchKeys":["FIRST","FIRST","io.github.techouse.qskotlin.enums.Duplicates.FIRST"]},{"name":"INDICES","description":"io.github.techouse.qskotlin.enums.ListFormat.INDICES","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-i-n-d-i-c-e-s/index.html","searchKeys":["INDICES","INDICES","io.github.techouse.qskotlin.enums.ListFormat.INDICES"]},{"name":"ISO","description":"io.github.techouse.qskotlin.enums.Sentinel.ISO","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/-i-s-o/index.html","searchKeys":["ISO","ISO","io.github.techouse.qskotlin.enums.Sentinel.ISO"]},{"name":"KEY","description":"io.github.techouse.qskotlin.enums.DecodeKind.KEY","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/-k-e-y/index.html","searchKeys":["KEY","KEY","io.github.techouse.qskotlin.enums.DecodeKind.KEY"]},{"name":"LAST","description":"io.github.techouse.qskotlin.enums.Duplicates.LAST","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/-l-a-s-t/index.html","searchKeys":["LAST","LAST","io.github.techouse.qskotlin.enums.Duplicates.LAST"]},{"name":"REPEAT","description":"io.github.techouse.qskotlin.enums.ListFormat.REPEAT","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-r-e-p-e-a-t/index.html","searchKeys":["REPEAT","REPEAT","io.github.techouse.qskotlin.enums.ListFormat.REPEAT"]},{"name":"RFC1738","description":"io.github.techouse.qskotlin.enums.Format.RFC1738","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-r-f-c1738/index.html","searchKeys":["RFC1738","RFC1738","io.github.techouse.qskotlin.enums.Format.RFC1738"]},{"name":"RFC3986","description":"io.github.techouse.qskotlin.enums.Format.RFC3986","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-r-f-c3986/index.html","searchKeys":["RFC3986","RFC3986","io.github.techouse.qskotlin.enums.Format.RFC3986"]},{"name":"VALUE","description":"io.github.techouse.qskotlin.enums.DecodeKind.VALUE","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/-v-a-l-u-e/index.html","searchKeys":["VALUE","VALUE","io.github.techouse.qskotlin.enums.DecodeKind.VALUE"]},{"name":"abstract fun apply(date: LocalDateTime): String","description":"io.github.techouse.qskotlin.models.JDateSerializer.apply","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-date-serializer/apply.html","searchKeys":["apply","abstract fun apply(date: LocalDateTime): String","io.github.techouse.qskotlin.models.JDateSerializer.apply"]},{"name":"abstract fun apply(prefix: String, key: String?): String","description":"io.github.techouse.qskotlin.enums.JListFormatGenerator.apply","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-j-list-format-generator/apply.html","searchKeys":["apply","abstract fun apply(prefix: String, key: String?): String","io.github.techouse.qskotlin.enums.JListFormatGenerator.apply"]},{"name":"abstract fun apply(value: Any?, charset: Charset?, format: Format?): String","description":"io.github.techouse.qskotlin.models.JValueEncoder.apply","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-value-encoder/apply.html","searchKeys":["apply","abstract fun apply(value: Any?, charset: Charset?, format: Format?): String","io.github.techouse.qskotlin.models.JValueEncoder.apply"]},{"name":"abstract fun decode(value: String?, charset: Charset?): Any?","description":"io.github.techouse.qskotlin.models.JLegacyDecoder.decode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-legacy-decoder/decode.html","searchKeys":["decode","abstract fun decode(value: String?, charset: Charset?): Any?","io.github.techouse.qskotlin.models.JLegacyDecoder.decode"]},{"name":"abstract fun decode(value: String?, charset: Charset?, kind: DecodeKind?): Any?","description":"io.github.techouse.qskotlin.models.Decoder.decode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decoder/decode.html","searchKeys":["decode","abstract fun decode(value: String?, charset: Charset?, kind: DecodeKind?): Any?","io.github.techouse.qskotlin.models.Decoder.decode"]},{"name":"abstract fun decode(value: String?, charset: Charset?, kind: DecodeKind?): Any?","description":"io.github.techouse.qskotlin.models.JDecoder.decode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-decoder/decode.html","searchKeys":["decode","abstract fun decode(value: String?, charset: Charset?, kind: DecodeKind?): Any?","io.github.techouse.qskotlin.models.JDecoder.decode"]},{"name":"abstract fun format(value: String): String","description":"io.github.techouse.qskotlin.enums.JFormatter.format","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-j-formatter/format.html","searchKeys":["format","abstract fun format(value: String): String","io.github.techouse.qskotlin.enums.JFormatter.format"]},{"name":"abstract fun split(input: String): List<String>","description":"io.github.techouse.qskotlin.models.Delimiter.split","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/split.html","searchKeys":["split","abstract fun split(input: String): List<String>","io.github.techouse.qskotlin.models.Delimiter.split"]},{"name":"class Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/index.html","searchKeys":["Builder","class Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder"]},{"name":"class Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/index.html","searchKeys":["Builder","class Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder"]},{"name":"class FunctionFilter(val function: (String, Any?) -> Any?) : Filter","description":"io.github.techouse.qskotlin.models.FunctionFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/index.html","searchKeys":["FunctionFilter","class FunctionFilter(val function: (String, Any?) -> Any?) : Filter","io.github.techouse.qskotlin.models.FunctionFilter"]},{"name":"class IterableFilter(val iterable: Iterable<*>) : Filter","description":"io.github.techouse.qskotlin.models.IterableFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/index.html","searchKeys":["IterableFilter","class IterableFilter(val iterable: Iterable<*>) : Filter","io.github.techouse.qskotlin.models.IterableFilter"]},{"name":"class RegexDelimiter(jPattern: Pattern) : Delimiter","description":"io.github.techouse.qskotlin.models.RegexDelimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/index.html","searchKeys":["RegexDelimiter","class RegexDelimiter(jPattern: Pattern) : Delimiter","io.github.techouse.qskotlin.models.RegexDelimiter"]},{"name":"const val PARAM_NAME: String","description":"io.github.techouse.qskotlin.enums.Sentinel.Companion.PARAM_NAME","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/-companion/-p-a-r-a-m_-n-a-m-e.html","searchKeys":["PARAM_NAME","const val PARAM_NAME: String","io.github.techouse.qskotlin.enums.Sentinel.Companion.PARAM_NAME"]},{"name":"constructor()","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.Builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/-builder.html","searchKeys":["Builder","constructor()","io.github.techouse.qskotlin.models.DecodeOptions.Builder.Builder"]},{"name":"constructor()","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.Builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/-builder.html","searchKeys":["Builder","constructor()","io.github.techouse.qskotlin.models.EncodeOptions.Builder.Builder"]},{"name":"constructor(allowDots: Boolean? = null, decoder: Decoder? = null, legacyDecoder: LegacyDecoder? = null, decodeDotInKeys: Boolean? = null, allowEmptyLists: Boolean = false, allowSparseLists: Boolean = false, listLimit: Int = 20, charset: Charset = StandardCharsets.UTF_8, charsetSentinel: Boolean = false, comma: Boolean = false, delimiter: Delimiter = Delimiter.AMPERSAND, depth: Int = 5, parameterLimit: Int = 1000, duplicates: Duplicates = Duplicates.COMBINE, ignoreQueryPrefix: Boolean = false, interpretNumericEntities: Boolean = false, parseLists: Boolean = true, strictDepth: Boolean = false, strictNullHandling: Boolean = false, throwOnLimitExceeded: Boolean = false)","description":"io.github.techouse.qskotlin.models.DecodeOptions.DecodeOptions","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-decode-options.html","searchKeys":["DecodeOptions","constructor(allowDots: Boolean? = null, decoder: Decoder? = null, legacyDecoder: LegacyDecoder? = null, decodeDotInKeys: Boolean? = null, allowEmptyLists: Boolean = false, allowSparseLists: Boolean = false, listLimit: Int = 20, charset: Charset = StandardCharsets.UTF_8, charsetSentinel: Boolean = false, comma: Boolean = false, delimiter: Delimiter = Delimiter.AMPERSAND, depth: Int = 5, parameterLimit: Int = 1000, duplicates: Duplicates = Duplicates.COMBINE, ignoreQueryPrefix: Boolean = false, interpretNumericEntities: Boolean = false, parseLists: Boolean = true, strictDepth: Boolean = false, strictNullHandling: Boolean = false, throwOnLimitExceeded: Boolean = false)","io.github.techouse.qskotlin.models.DecodeOptions.DecodeOptions"]},{"name":"constructor(array: Array<out Any?>)","description":"io.github.techouse.qskotlin.models.IterableFilter.IterableFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-iterable-filter.html","searchKeys":["IterableFilter","constructor(array: Array<out Any?>)","io.github.techouse.qskotlin.models.IterableFilter.IterableFilter"]},{"name":"constructor(collection: Collection<*>)","description":"io.github.techouse.qskotlin.models.IterableFilter.IterableFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-iterable-filter.html","searchKeys":["IterableFilter","constructor(collection: Collection<*>)","io.github.techouse.qskotlin.models.IterableFilter.IterableFilter"]},{"name":"constructor(encoder: ValueEncoder? = null, dateSerializer: DateSerializer? = null, listFormat: ListFormat? = null, indices: Boolean? = null, allowDots: Boolean? = null, addQueryPrefix: Boolean = false, allowEmptyLists: Boolean = false, charset: Charset = StandardCharsets.UTF_8, charsetSentinel: Boolean = false, delimiter: StringDelimiter = Delimiter.AMPERSAND, encode: Boolean = true, encodeDotInKeys: Boolean = false, encodeValuesOnly: Boolean = false, format: Format = Format.RFC3986, filter: Filter? = null, skipNulls: Boolean = false, strictNullHandling: Boolean = false, commaRoundTrip: Boolean? = null, sort: Sorter? = null)","description":"io.github.techouse.qskotlin.models.EncodeOptions.EncodeOptions","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-encode-options.html","searchKeys":["EncodeOptions","constructor(encoder: ValueEncoder? = null, dateSerializer: DateSerializer? = null, listFormat: ListFormat? = null, indices: Boolean? = null, allowDots: Boolean? = null, addQueryPrefix: Boolean = false, allowEmptyLists: Boolean = false, charset: Charset = StandardCharsets.UTF_8, charsetSentinel: Boolean = false, delimiter: StringDelimiter = Delimiter.AMPERSAND, encode: Boolean = true, encodeDotInKeys: Boolean = false, encodeValuesOnly: Boolean = false, format: Format = Format.RFC3986, filter: Filter? = null, skipNulls: Boolean = false, strictNullHandling: Boolean = false, commaRoundTrip: Boolean? = null, sort: Sorter? = null)","io.github.techouse.qskotlin.models.EncodeOptions.EncodeOptions"]},{"name":"constructor(fn: BiFunction<String, Any?, Any?>)","description":"io.github.techouse.qskotlin.models.FunctionFilter.FunctionFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/-function-filter.html","searchKeys":["FunctionFilter","constructor(fn: BiFunction<String, Any?, Any?>)","io.github.techouse.qskotlin.models.FunctionFilter.FunctionFilter"]},{"name":"constructor(function: (String, Any?) -> Any?)","description":"io.github.techouse.qskotlin.models.FunctionFilter.FunctionFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/-function-filter.html","searchKeys":["FunctionFilter","constructor(function: (String, Any?) -> Any?)","io.github.techouse.qskotlin.models.FunctionFilter.FunctionFilter"]},{"name":"constructor(iterable: Iterable<*>)","description":"io.github.techouse.qskotlin.models.IterableFilter.IterableFilter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-iterable-filter.html","searchKeys":["IterableFilter","constructor(iterable: Iterable<*>)","io.github.techouse.qskotlin.models.IterableFilter.IterableFilter"]},{"name":"constructor(jPattern: Pattern)","description":"io.github.techouse.qskotlin.models.RegexDelimiter.RegexDelimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/-regex-delimiter.html","searchKeys":["RegexDelimiter","constructor(jPattern: Pattern)","io.github.techouse.qskotlin.models.RegexDelimiter.RegexDelimiter"]},{"name":"constructor(pattern: String)","description":"io.github.techouse.qskotlin.models.RegexDelimiter.RegexDelimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/-regex-delimiter.html","searchKeys":["RegexDelimiter","constructor(pattern: String)","io.github.techouse.qskotlin.models.RegexDelimiter.RegexDelimiter"]},{"name":"constructor(value: String)","description":"io.github.techouse.qskotlin.models.StringDelimiter.StringDelimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-string-delimiter/-string-delimiter.html","searchKeys":["StringDelimiter","constructor(value: String)","io.github.techouse.qskotlin.models.StringDelimiter.StringDelimiter"]},{"name":"data class DecodeOptions(allowDots: Boolean? = null, decoder: Decoder? = null, legacyDecoder: LegacyDecoder? = null, decodeDotInKeys: Boolean? = null, val allowEmptyLists: Boolean = false, val allowSparseLists: Boolean = false, val listLimit: Int = 20, val charset: Charset = StandardCharsets.UTF_8, val charsetSentinel: Boolean = false, val comma: Boolean = false, val delimiter: Delimiter = Delimiter.AMPERSAND, val depth: Int = 5, val parameterLimit: Int = 1000, val duplicates: Duplicates = Duplicates.COMBINE, val ignoreQueryPrefix: Boolean = false, val interpretNumericEntities: Boolean = false, val parseLists: Boolean = true, val strictDepth: Boolean = false, val strictNullHandling: Boolean = false, val throwOnLimitExceeded: Boolean = false)","description":"io.github.techouse.qskotlin.models.DecodeOptions","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/index.html","searchKeys":["DecodeOptions","data class DecodeOptions(allowDots: Boolean? = null, decoder: Decoder? = null, legacyDecoder: LegacyDecoder? = null, decodeDotInKeys: Boolean? = null, val allowEmptyLists: Boolean = false, val allowSparseLists: Boolean = false, val listLimit: Int = 20, val charset: Charset = StandardCharsets.UTF_8, val charsetSentinel: Boolean = false, val comma: Boolean = false, val delimiter: Delimiter = Delimiter.AMPERSAND, val depth: Int = 5, val parameterLimit: Int = 1000, val duplicates: Duplicates = Duplicates.COMBINE, val ignoreQueryPrefix: Boolean = false, val interpretNumericEntities: Boolean = false, val parseLists: Boolean = true, val strictDepth: Boolean = false, val strictNullHandling: Boolean = false, val throwOnLimitExceeded: Boolean = false)","io.github.techouse.qskotlin.models.DecodeOptions"]},{"name":"data class EncodeOptions(encoder: ValueEncoder? = null, dateSerializer: DateSerializer? = null, listFormat: ListFormat? = null, val indices: Boolean? = null, allowDots: Boolean? = null, val addQueryPrefix: Boolean = false, val allowEmptyLists: Boolean = false, val charset: Charset = StandardCharsets.UTF_8, val charsetSentinel: Boolean = false, val delimiter: StringDelimiter = Delimiter.AMPERSAND, val encode: Boolean = true, val encodeDotInKeys: Boolean = false, val encodeValuesOnly: Boolean = false, val format: Format = Format.RFC3986, val filter: Filter? = null, val skipNulls: Boolean = false, val strictNullHandling: Boolean = false, val commaRoundTrip: Boolean? = null, val sort: Sorter? = null)","description":"io.github.techouse.qskotlin.models.EncodeOptions","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/index.html","searchKeys":["EncodeOptions","data class EncodeOptions(encoder: ValueEncoder? = null, dateSerializer: DateSerializer? = null, listFormat: ListFormat? = null, val indices: Boolean? = null, allowDots: Boolean? = null, val addQueryPrefix: Boolean = false, val allowEmptyLists: Boolean = false, val charset: Charset = StandardCharsets.UTF_8, val charsetSentinel: Boolean = false, val delimiter: StringDelimiter = Delimiter.AMPERSAND, val encode: Boolean = true, val encodeDotInKeys: Boolean = false, val encodeValuesOnly: Boolean = false, val format: Format = Format.RFC3986, val filter: Filter? = null, val skipNulls: Boolean = false, val strictNullHandling: Boolean = false, val commaRoundTrip: Boolean? = null, val sort: Sorter? = null)","io.github.techouse.qskotlin.models.EncodeOptions"]},{"name":"data class StringDelimiter(val value: String) : Delimiter","description":"io.github.techouse.qskotlin.models.StringDelimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-string-delimiter/index.html","searchKeys":["StringDelimiter","data class StringDelimiter(val value: String) : Delimiter","io.github.techouse.qskotlin.models.StringDelimiter"]},{"name":"enum DecodeKind : Enum<DecodeKind> ","description":"io.github.techouse.qskotlin.enums.DecodeKind","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/index.html","searchKeys":["DecodeKind","enum DecodeKind : Enum<DecodeKind> ","io.github.techouse.qskotlin.enums.DecodeKind"]},{"name":"enum Duplicates : Enum<Duplicates> ","description":"io.github.techouse.qskotlin.enums.Duplicates","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/index.html","searchKeys":["Duplicates","enum Duplicates : Enum<Duplicates> ","io.github.techouse.qskotlin.enums.Duplicates"]},{"name":"enum Format : Enum<Format> ","description":"io.github.techouse.qskotlin.enums.Format","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/index.html","searchKeys":["Format","enum Format : Enum<Format> ","io.github.techouse.qskotlin.enums.Format"]},{"name":"enum ListFormat : Enum<ListFormat> ","description":"io.github.techouse.qskotlin.enums.ListFormat","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/index.html","searchKeys":["ListFormat","enum ListFormat : Enum<ListFormat> ","io.github.techouse.qskotlin.enums.ListFormat"]},{"name":"enum Sentinel : Enum<Sentinel> ","description":"io.github.techouse.qskotlin.enums.Sentinel","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/index.html","searchKeys":["Sentinel","enum Sentinel : Enum<Sentinel> ","io.github.techouse.qskotlin.enums.Sentinel"]},{"name":"fun Map<*, *>.toQueryString(options: EncodeOptions? = null): String","description":"io.github.techouse.qskotlin.toQueryString","location":"qs-kotlin/io.github.techouse.qskotlin/to-query-string.html","searchKeys":["toQueryString","fun Map<*, *>.toQueryString(options: EncodeOptions? = null): String","io.github.techouse.qskotlin.toQueryString"]},{"name":"fun String.toQueryMap(options: DecodeOptions? = null): Map<String, Any?>","description":"io.github.techouse.qskotlin.toQueryMap","location":"qs-kotlin/io.github.techouse.qskotlin/to-query-map.html","searchKeys":["toQueryMap","fun String.toQueryMap(options: DecodeOptions? = null): Map<String, Any?>","io.github.techouse.qskotlin.toQueryMap"]},{"name":"fun addQueryPrefix(add: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.addQueryPrefix","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/add-query-prefix.html","searchKeys":["addQueryPrefix","fun addQueryPrefix(add: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.addQueryPrefix"]},{"name":"fun allowDots(allowDots: Boolean?): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.allowDots","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/allow-dots.html","searchKeys":["allowDots","fun allowDots(allowDots: Boolean?): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.allowDots"]},{"name":"fun allowDots(value: Boolean?): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowDots","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/allow-dots.html","searchKeys":["allowDots","fun allowDots(value: Boolean?): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowDots"]},{"name":"fun allowEmptyLists(allow: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.allowEmptyLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/allow-empty-lists.html","searchKeys":["allowEmptyLists","fun allowEmptyLists(allow: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.allowEmptyLists"]},{"name":"fun allowEmptyLists(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowEmptyLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/allow-empty-lists.html","searchKeys":["allowEmptyLists","fun allowEmptyLists(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowEmptyLists"]},{"name":"fun allowSparseLists(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowSparseLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/allow-sparse-lists.html","searchKeys":["allowSparseLists","fun allowSparseLists(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.allowSparseLists"]},{"name":"fun asQueryParam(): String","description":"io.github.techouse.qskotlin.enums.Sentinel.asQueryParam","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/as-query-param.html","searchKeys":["asQueryParam","fun asQueryParam(): String","io.github.techouse.qskotlin.enums.Sentinel.asQueryParam"]},{"name":"fun build(): DecodeOptions","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.build","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/build.html","searchKeys":["build","fun build(): DecodeOptions","io.github.techouse.qskotlin.models.DecodeOptions.Builder.build"]},{"name":"fun build(): EncodeOptions","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.build","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/build.html","searchKeys":["build","fun build(): EncodeOptions","io.github.techouse.qskotlin.models.EncodeOptions.Builder.build"]},{"name":"fun builder(): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Companion.builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-companion/builder.html","searchKeys":["builder","fun builder(): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Companion.builder"]},{"name":"fun builder(): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Companion.builder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-companion/builder.html","searchKeys":["builder","fun builder(): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Companion.builder"]},{"name":"fun charset(charset: Charset): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.charset","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/charset.html","searchKeys":["charset","fun charset(charset: Charset): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.charset"]},{"name":"fun charset(value: Charset): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.charset","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/charset.html","searchKeys":["charset","fun charset(value: Charset): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.charset"]},{"name":"fun charsetSentinel(enabled: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.charsetSentinel","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/charset-sentinel.html","searchKeys":["charsetSentinel","fun charsetSentinel(enabled: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.charsetSentinel"]},{"name":"fun charsetSentinel(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.charsetSentinel","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/charset-sentinel.html","searchKeys":["charsetSentinel","fun charsetSentinel(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.charsetSentinel"]},{"name":"fun comma(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.comma","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/comma.html","searchKeys":["comma","fun comma(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.comma"]},{"name":"fun commaRoundTrip(value: Boolean?): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.commaRoundTrip","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/comma-round-trip.html","searchKeys":["commaRoundTrip","fun commaRoundTrip(value: Boolean?): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.commaRoundTrip"]},{"name":"fun dateSerializer(serializer: DateSerializer): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.dateSerializer","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/date-serializer.html","searchKeys":["dateSerializer","fun dateSerializer(serializer: DateSerializer): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.dateSerializer"]},{"name":"fun dateSerializer(serializer: JDateSerializer): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.dateSerializer","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/date-serializer.html","searchKeys":["dateSerializer","fun dateSerializer(serializer: JDateSerializer): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.dateSerializer"]},{"name":"fun decode(input: Any?, options: DecodeOptions? = null): Map<String, Any?>","description":"io.github.techouse.qskotlin.decode","location":"qs-kotlin/io.github.techouse.qskotlin/decode.html","searchKeys":["decode","fun decode(input: Any?, options: DecodeOptions? = null): Map<String, Any?>","io.github.techouse.qskotlin.decode"]},{"name":"fun decodeDotInKeys(value: Boolean?): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.decodeDotInKeys","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/decode-dot-in-keys.html","searchKeys":["decodeDotInKeys","fun decodeDotInKeys(value: Boolean?): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.decodeDotInKeys"]},{"name":"fun decodeKey(value: String?, charset: Charset? = this.charset): String?","description":"io.github.techouse.qskotlin.models.DecodeOptions.decodeKey","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/decode-key.html","searchKeys":["decodeKey","fun decodeKey(value: String?, charset: Charset? = this.charset): String?","io.github.techouse.qskotlin.models.DecodeOptions.decodeKey"]},{"name":"fun decodeValue(value: String?, charset: Charset? = this.charset): Any?","description":"io.github.techouse.qskotlin.models.DecodeOptions.decodeValue","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/decode-value.html","searchKeys":["decodeValue","fun decodeValue(value: String?, charset: Charset? = this.charset): Any?","io.github.techouse.qskotlin.models.DecodeOptions.decodeValue"]},{"name":"fun decoder(decoder: Decoder): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.decoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/decoder.html","searchKeys":["decoder","fun decoder(decoder: Decoder): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.decoder"]},{"name":"fun decoder(decoder: JDecoder): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.decoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/decoder.html","searchKeys":["decoder","fun decoder(decoder: JDecoder): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.decoder"]},{"name":"fun defaults(): DecodeOptions","description":"io.github.techouse.qskotlin.models.DecodeOptions.Companion.defaults","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-companion/defaults.html","searchKeys":["defaults","fun defaults(): DecodeOptions","io.github.techouse.qskotlin.models.DecodeOptions.Companion.defaults"]},{"name":"fun defaults(): EncodeOptions","description":"io.github.techouse.qskotlin.models.EncodeOptions.Companion.defaults","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-companion/defaults.html","searchKeys":["defaults","fun defaults(): EncodeOptions","io.github.techouse.qskotlin.models.EncodeOptions.Companion.defaults"]},{"name":"fun delimiter(value: Delimiter): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/delimiter.html","searchKeys":["delimiter","fun delimiter(value: Delimiter): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter"]},{"name":"fun delimiter(value: Pattern): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/delimiter.html","searchKeys":["delimiter","fun delimiter(value: Pattern): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter"]},{"name":"fun delimiter(value: String): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/delimiter.html","searchKeys":["delimiter","fun delimiter(value: String): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiter"]},{"name":"fun delimiter(value: String): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/delimiter.html","searchKeys":["delimiter","fun delimiter(value: String): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.delimiter"]},{"name":"fun delimiter(value: StringDelimiter): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/delimiter.html","searchKeys":["delimiter","fun delimiter(value: StringDelimiter): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.delimiter"]},{"name":"fun delimiterRegex(pattern: String, flags: Int): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiterRegex","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/delimiter-regex.html","searchKeys":["delimiterRegex","fun delimiterRegex(pattern: String, flags: Int): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.delimiterRegex"]},{"name":"fun depth(value: Int): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.depth","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/depth.html","searchKeys":["depth","fun depth(value: Int): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.depth"]},{"name":"fun duplicates(value: Duplicates): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.duplicates","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/duplicates.html","searchKeys":["duplicates","fun duplicates(value: Duplicates): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.duplicates"]},{"name":"fun encode(data: Any?, options: EncodeOptions? = null): String","description":"io.github.techouse.qskotlin.encode","location":"qs-kotlin/io.github.techouse.qskotlin/encode.html","searchKeys":["encode","fun encode(data: Any?, options: EncodeOptions? = null): String","io.github.techouse.qskotlin.encode"]},{"name":"fun encode(enabled: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.encode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/encode.html","searchKeys":["encode","fun encode(enabled: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.encode"]},{"name":"fun encodeDotInKeys(enabled: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.encodeDotInKeys","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/encode-dot-in-keys.html","searchKeys":["encodeDotInKeys","fun encodeDotInKeys(enabled: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.encodeDotInKeys"]},{"name":"fun encodeValuesOnly(enabled: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.encodeValuesOnly","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/encode-values-only.html","searchKeys":["encodeValuesOnly","fun encodeValuesOnly(enabled: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.encodeValuesOnly"]},{"name":"fun encoder(encoder: JValueEncoder): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.encoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/encoder.html","searchKeys":["encoder","fun encoder(encoder: JValueEncoder): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.encoder"]},{"name":"fun encoder(encoder: ValueEncoder): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.encoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/encoder.html","searchKeys":["encoder","fun encoder(encoder: ValueEncoder): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.encoder"]},{"name":"fun filter(filter: Filter?): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.filter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/filter.html","searchKeys":["filter","fun filter(filter: Filter?): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.filter"]},{"name":"fun format(format: Format): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.format","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/format.html","searchKeys":["format","fun format(format: Format): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.format"]},{"name":"fun format(value: String): String","description":"io.github.techouse.qskotlin.enums.Format.format","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/format.html","searchKeys":["format","fun format(value: String): String","io.github.techouse.qskotlin.enums.Format.format"]},{"name":"fun formatter(fn: Function<String, String>): Formatter","description":"io.github.techouse.qskotlin.enums.Format.Companion.formatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-companion/formatter.html","searchKeys":["formatter","fun formatter(fn: Function<String, String>): Formatter","io.github.techouse.qskotlin.enums.Format.Companion.formatter"]},{"name":"fun formatter(fn: JFormatter): Formatter","description":"io.github.techouse.qskotlin.enums.Format.Companion.formatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-companion/formatter.html","searchKeys":["formatter","fun formatter(fn: JFormatter): Formatter","io.github.techouse.qskotlin.enums.Format.Companion.formatter"]},{"name":"fun formatter(fn: UnaryOperator<String>): Formatter","description":"io.github.techouse.qskotlin.enums.Format.Companion.formatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-companion/formatter.html","searchKeys":["formatter","fun formatter(fn: UnaryOperator<String>): Formatter","io.github.techouse.qskotlin.enums.Format.Companion.formatter"]},{"name":"fun from(collection: Collection<*>): IterableFilter","description":"io.github.techouse.qskotlin.models.IterableFilter.Companion.from","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-companion/from.html","searchKeys":["from","fun from(collection: Collection<*>): IterableFilter","io.github.techouse.qskotlin.models.IterableFilter.Companion.from"]},{"name":"fun from(fn: BiFunction<String, Any?, Any?>): FunctionFilter","description":"io.github.techouse.qskotlin.models.FunctionFilter.Companion.from","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/-companion/from.html","searchKeys":["from","fun from(fn: BiFunction<String, Any?, Any?>): FunctionFilter","io.github.techouse.qskotlin.models.FunctionFilter.Companion.from"]},{"name":"fun generate(prefix: String, key: String?): String","description":"io.github.techouse.qskotlin.enums.ListFormat.generate","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/generate.html","searchKeys":["generate","fun generate(prefix: String, key: String?): String","io.github.techouse.qskotlin.enums.ListFormat.generate"]},{"name":"fun generator(fn: BiFunction<String, String?, String>): ListFormatGenerator","description":"io.github.techouse.qskotlin.enums.ListFormat.Companion.generator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-companion/generator.html","searchKeys":["generator","fun generator(fn: BiFunction<String, String?, String>): ListFormatGenerator","io.github.techouse.qskotlin.enums.ListFormat.Companion.generator"]},{"name":"fun generator(fn: Function<String, String>): ListFormatGenerator","description":"io.github.techouse.qskotlin.enums.ListFormat.Companion.generator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-companion/generator.html","searchKeys":["generator","fun generator(fn: Function<String, String>): ListFormatGenerator","io.github.techouse.qskotlin.enums.ListFormat.Companion.generator"]},{"name":"fun generator(fn: JListFormatGenerator): ListFormatGenerator","description":"io.github.techouse.qskotlin.enums.ListFormat.Companion.generator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-companion/generator.html","searchKeys":["generator","fun generator(fn: JListFormatGenerator): ListFormatGenerator","io.github.techouse.qskotlin.enums.ListFormat.Companion.generator"]},{"name":"fun getDateSerializer(date: LocalDateTime): String","description":"io.github.techouse.qskotlin.models.EncodeOptions.getDateSerializer","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/get-date-serializer.html","searchKeys":["getDateSerializer","fun getDateSerializer(date: LocalDateTime): String","io.github.techouse.qskotlin.models.EncodeOptions.getDateSerializer"]},{"name":"fun getEncoder(value: Any?, charset: Charset? = null, format: Format? = null): String","description":"io.github.techouse.qskotlin.models.EncodeOptions.getEncoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/get-encoder.html","searchKeys":["getEncoder","fun getEncoder(value: Any?, charset: Charset? = null, format: Format? = null): String","io.github.techouse.qskotlin.models.EncodeOptions.getEncoder"]},{"name":"fun ignoreQueryPrefix(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.ignoreQueryPrefix","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/ignore-query-prefix.html","searchKeys":["ignoreQueryPrefix","fun ignoreQueryPrefix(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.ignoreQueryPrefix"]},{"name":"fun indices(indices: Boolean?): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.indices","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/indices.html","searchKeys":["indices","fun indices(indices: Boolean?): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.indices"]},{"name":"fun interface Decoder","description":"io.github.techouse.qskotlin.models.Decoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decoder/index.html","searchKeys":["Decoder","fun interface Decoder","io.github.techouse.qskotlin.models.Decoder"]},{"name":"fun interface JDateSerializer","description":"io.github.techouse.qskotlin.models.JDateSerializer","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-date-serializer/index.html","searchKeys":["JDateSerializer","fun interface JDateSerializer","io.github.techouse.qskotlin.models.JDateSerializer"]},{"name":"fun interface JDecoder","description":"io.github.techouse.qskotlin.models.JDecoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-decoder/index.html","searchKeys":["JDecoder","fun interface JDecoder","io.github.techouse.qskotlin.models.JDecoder"]},{"name":"fun interface JFormatter","description":"io.github.techouse.qskotlin.enums.JFormatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-j-formatter/index.html","searchKeys":["JFormatter","fun interface JFormatter","io.github.techouse.qskotlin.enums.JFormatter"]},{"name":"fun interface JLegacyDecoder","description":"io.github.techouse.qskotlin.models.JLegacyDecoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-legacy-decoder/index.html","searchKeys":["JLegacyDecoder","fun interface JLegacyDecoder","io.github.techouse.qskotlin.models.JLegacyDecoder"]},{"name":"fun interface JListFormatGenerator","description":"io.github.techouse.qskotlin.enums.JListFormatGenerator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-j-list-format-generator/index.html","searchKeys":["JListFormatGenerator","fun interface JListFormatGenerator","io.github.techouse.qskotlin.enums.JListFormatGenerator"]},{"name":"fun interface JValueEncoder","description":"io.github.techouse.qskotlin.models.JValueEncoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-j-value-encoder/index.html","searchKeys":["JValueEncoder","fun interface JValueEncoder","io.github.techouse.qskotlin.models.JValueEncoder"]},{"name":"fun interpretNumericEntities(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.interpretNumericEntities","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/interpret-numeric-entities.html","searchKeys":["interpretNumericEntities","fun interpretNumericEntities(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.interpretNumericEntities"]},{"name":"fun isAllowDotsEffective(): Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.isAllowDotsEffective","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/is-allow-dots-effective.html","searchKeys":["isAllowDotsEffective","fun isAllowDotsEffective(): Boolean","io.github.techouse.qskotlin.models.DecodeOptions.isAllowDotsEffective"]},{"name":"fun isDecodeDotInKeysEffective(): Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.isDecodeDotInKeysEffective","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/is-decode-dot-in-keys-effective.html","searchKeys":["isDecodeDotInKeysEffective","fun isDecodeDotInKeysEffective(): Boolean","io.github.techouse.qskotlin.models.DecodeOptions.isDecodeDotInKeysEffective"]},{"name":"fun legacyDecoder(decoder: JLegacyDecoder): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.legacyDecoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/legacy-decoder.html","searchKeys":["legacyDecoder","fun legacyDecoder(decoder: JLegacyDecoder): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.legacyDecoder"]},{"name":"fun legacyDecoder(decoder: LegacyDecoder): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.legacyDecoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/legacy-decoder.html","searchKeys":["legacyDecoder","fun legacyDecoder(decoder: LegacyDecoder): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.legacyDecoder"]},{"name":"fun listFormat(listFormat: ListFormat?): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.listFormat","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/list-format.html","searchKeys":["listFormat","fun listFormat(listFormat: ListFormat?): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.listFormat"]},{"name":"fun listLimit(value: Int): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.listLimit","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/list-limit.html","searchKeys":["listLimit","fun listLimit(value: Int): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.listLimit"]},{"name":"fun of(vararg values: Any?): IterableFilter","description":"io.github.techouse.qskotlin.models.IterableFilter.Companion.of","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-companion/of.html","searchKeys":["of","fun of(vararg values: Any?): IterableFilter","io.github.techouse.qskotlin.models.IterableFilter.Companion.of"]},{"name":"fun parameterLimit(value: Int): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.parameterLimit","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/parameter-limit.html","searchKeys":["parameterLimit","fun parameterLimit(value: Int): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.parameterLimit"]},{"name":"fun parseLists(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.parseLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/parse-lists.html","searchKeys":["parseLists","fun parseLists(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.parseLists"]},{"name":"fun regex(pattern: Pattern): RegexDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.regex","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/regex.html","searchKeys":["regex","fun regex(pattern: Pattern): RegexDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.regex"]},{"name":"fun regex(pattern: String): RegexDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.regex","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/regex.html","searchKeys":["regex","fun regex(pattern: String): RegexDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.regex"]},{"name":"fun regex(pattern: String, flags: Int): RegexDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.regex","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/regex.html","searchKeys":["regex","fun regex(pattern: String, flags: Int): RegexDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.regex"]},{"name":"fun regex(pattern: String, options: Set<RegexOption>): RegexDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.regex","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/regex.html","searchKeys":["regex","fun regex(pattern: String, options: Set<RegexOption>): RegexDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.regex"]},{"name":"fun skipNulls(skip: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.skipNulls","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/skip-nulls.html","searchKeys":["skipNulls","fun skipNulls(skip: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.skipNulls"]},{"name":"fun sort(comparator: Comparator<Any?>): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.sort","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/sort.html","searchKeys":["sort","fun sort(comparator: Comparator<Any?>): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.sort"]},{"name":"fun strictDepth(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.strictDepth","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/strict-depth.html","searchKeys":["strictDepth","fun strictDepth(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.strictDepth"]},{"name":"fun strictNullHandling(strict: Boolean): EncodeOptions.Builder","description":"io.github.techouse.qskotlin.models.EncodeOptions.Builder.strictNullHandling","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-builder/strict-null-handling.html","searchKeys":["strictNullHandling","fun strictNullHandling(strict: Boolean): EncodeOptions.Builder","io.github.techouse.qskotlin.models.EncodeOptions.Builder.strictNullHandling"]},{"name":"fun strictNullHandling(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.strictNullHandling","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/strict-null-handling.html","searchKeys":["strictNullHandling","fun strictNullHandling(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.strictNullHandling"]},{"name":"fun string(value: String): StringDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.string","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/string.html","searchKeys":["string","fun string(value: String): StringDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.string"]},{"name":"fun throwOnLimitExceeded(value: Boolean): DecodeOptions.Builder","description":"io.github.techouse.qskotlin.models.DecodeOptions.Builder.throwOnLimitExceeded","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-builder/throw-on-limit-exceeded.html","searchKeys":["throwOnLimitExceeded","fun throwOnLimitExceeded(value: Boolean): DecodeOptions.Builder","io.github.techouse.qskotlin.models.DecodeOptions.Builder.throwOnLimitExceeded"]},{"name":"fun toEntry(): Map.Entry<String, String>","description":"io.github.techouse.qskotlin.enums.Sentinel.toEntry","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/to-entry.html","searchKeys":["toEntry","fun toEntry(): Map.Entry<String, String>","io.github.techouse.qskotlin.enums.Sentinel.toEntry"]},{"name":"fun valueOf(value: String): DecodeKind","description":"io.github.techouse.qskotlin.enums.DecodeKind.valueOf","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): DecodeKind","io.github.techouse.qskotlin.enums.DecodeKind.valueOf"]},{"name":"fun valueOf(value: String): Duplicates","description":"io.github.techouse.qskotlin.enums.Duplicates.valueOf","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Duplicates","io.github.techouse.qskotlin.enums.Duplicates.valueOf"]},{"name":"fun valueOf(value: String): Format","description":"io.github.techouse.qskotlin.enums.Format.valueOf","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Format","io.github.techouse.qskotlin.enums.Format.valueOf"]},{"name":"fun valueOf(value: String): ListFormat","description":"io.github.techouse.qskotlin.enums.ListFormat.valueOf","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): ListFormat","io.github.techouse.qskotlin.enums.ListFormat.valueOf"]},{"name":"fun valueOf(value: String): Sentinel","description":"io.github.techouse.qskotlin.enums.Sentinel.valueOf","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Sentinel","io.github.techouse.qskotlin.enums.Sentinel.valueOf"]},{"name":"fun values(): Array<DecodeKind>","description":"io.github.techouse.qskotlin.enums.DecodeKind.values","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/values.html","searchKeys":["values","fun values(): Array<DecodeKind>","io.github.techouse.qskotlin.enums.DecodeKind.values"]},{"name":"fun values(): Array<Duplicates>","description":"io.github.techouse.qskotlin.enums.Duplicates.values","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/values.html","searchKeys":["values","fun values(): Array<Duplicates>","io.github.techouse.qskotlin.enums.Duplicates.values"]},{"name":"fun values(): Array<Format>","description":"io.github.techouse.qskotlin.enums.Format.values","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/values.html","searchKeys":["values","fun values(): Array<Format>","io.github.techouse.qskotlin.enums.Format.values"]},{"name":"fun values(): Array<ListFormat>","description":"io.github.techouse.qskotlin.enums.ListFormat.values","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/values.html","searchKeys":["values","fun values(): Array<ListFormat>","io.github.techouse.qskotlin.enums.ListFormat.values"]},{"name":"fun values(): Array<Sentinel>","description":"io.github.techouse.qskotlin.enums.Sentinel.values","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/values.html","searchKeys":["values","fun values(): Array<Sentinel>","io.github.techouse.qskotlin.enums.Sentinel.values"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.enums.Format.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.enums.Format.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.enums.ListFormat.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.enums.ListFormat.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.enums.Sentinel.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.enums.Sentinel.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.models.DecodeOptions.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.models.DecodeOptions.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.models.Delimiter.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.models.Delimiter.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.models.EncodeOptions.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.models.EncodeOptions.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.models.FunctionFilter.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.models.FunctionFilter.Companion"]},{"name":"object Companion","description":"io.github.techouse.qskotlin.models.IterableFilter.Companion","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/-companion/index.html","searchKeys":["Companion","object Companion","io.github.techouse.qskotlin.models.IterableFilter.Companion"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"io.github.techouse.qskotlin.models.RegexDelimiter.equals","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","io.github.techouse.qskotlin.models.RegexDelimiter.equals"]},{"name":"open override fun hashCode(): Int","description":"io.github.techouse.qskotlin.models.RegexDelimiter.hashCode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","io.github.techouse.qskotlin.models.RegexDelimiter.hashCode"]},{"name":"open override fun split(input: String): List<String>","description":"io.github.techouse.qskotlin.models.RegexDelimiter.split","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/split.html","searchKeys":["split","open override fun split(input: String): List<String>","io.github.techouse.qskotlin.models.RegexDelimiter.split"]},{"name":"open override fun split(input: String): List<String>","description":"io.github.techouse.qskotlin.models.StringDelimiter.split","location":"qs-kotlin/io.github.techouse.qskotlin.models/-string-delimiter/split.html","searchKeys":["split","open override fun split(input: String): List<String>","io.github.techouse.qskotlin.models.StringDelimiter.split"]},{"name":"open override fun toString(): String","description":"io.github.techouse.qskotlin.enums.Sentinel.toString","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.techouse.qskotlin.enums.Sentinel.toString"]},{"name":"open override fun toString(): String","description":"io.github.techouse.qskotlin.models.RegexDelimiter.toString","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/to-string.html","searchKeys":["toString","open override fun toString(): String","io.github.techouse.qskotlin.models.RegexDelimiter.toString"]},{"name":"sealed class Delimiter","description":"io.github.techouse.qskotlin.models.Delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/index.html","searchKeys":["Delimiter","sealed class Delimiter","io.github.techouse.qskotlin.models.Delimiter"]},{"name":"sealed interface Filter","description":"io.github.techouse.qskotlin.models.Filter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-filter/index.html","searchKeys":["Filter","sealed interface Filter","io.github.techouse.qskotlin.models.Filter"]},{"name":"typealias DateSerializer = (date: LocalDateTime) -> String","description":"io.github.techouse.qskotlin.models.DateSerializer","location":"qs-kotlin/io.github.techouse.qskotlin.models/-date-serializer/index.html","searchKeys":["DateSerializer","typealias DateSerializer = (date: LocalDateTime) -> String","io.github.techouse.qskotlin.models.DateSerializer"]},{"name":"typealias Formatter = (value: String) -> String","description":"io.github.techouse.qskotlin.enums.Formatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-formatter/index.html","searchKeys":["Formatter","typealias Formatter = (value: String) -> String","io.github.techouse.qskotlin.enums.Formatter"]},{"name":"typealias LegacyDecoder = (String?, Charset?) -> Any?","description":"io.github.techouse.qskotlin.models.LegacyDecoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-legacy-decoder/index.html","searchKeys":["LegacyDecoder","typealias LegacyDecoder = (String?, Charset?) -> Any?","io.github.techouse.qskotlin.models.LegacyDecoder"]},{"name":"typealias ListFormatGenerator = (prefix: String, key: String?) -> String","description":"io.github.techouse.qskotlin.enums.ListFormatGenerator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format-generator/index.html","searchKeys":["ListFormatGenerator","typealias ListFormatGenerator = (prefix: String, key: String?) -> String","io.github.techouse.qskotlin.enums.ListFormatGenerator"]},{"name":"typealias Sorter = (a: Any?, b: Any?) -> Int","description":"io.github.techouse.qskotlin.models.Sorter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-sorter/index.html","searchKeys":["Sorter","typealias Sorter = (a: Any?, b: Any?) -> Int","io.github.techouse.qskotlin.models.Sorter"]},{"name":"typealias ValueEncoder = (value: Any?, charset: Charset?, format: Format?) -> String","description":"io.github.techouse.qskotlin.models.ValueEncoder","location":"qs-kotlin/io.github.techouse.qskotlin.models/-value-encoder/index.html","searchKeys":["ValueEncoder","typealias ValueEncoder = (value: Any?, charset: Charset?, format: Format?) -> String","io.github.techouse.qskotlin.models.ValueEncoder"]},{"name":"val AMPERSAND: StringDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.AMPERSAND","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/-a-m-p-e-r-s-a-n-d.html","searchKeys":["AMPERSAND","val AMPERSAND: StringDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.AMPERSAND"]},{"name":"val COMMA: StringDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.COMMA","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/-c-o-m-m-a.html","searchKeys":["COMMA","val COMMA: StringDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.COMMA"]},{"name":"val SEMICOLON: StringDelimiter","description":"io.github.techouse.qskotlin.models.Delimiter.Companion.SEMICOLON","location":"qs-kotlin/io.github.techouse.qskotlin.models/-delimiter/-companion/-s-e-m-i-c-o-l-o-n.html","searchKeys":["SEMICOLON","val SEMICOLON: StringDelimiter","io.github.techouse.qskotlin.models.Delimiter.Companion.SEMICOLON"]},{"name":"val addQueryPrefix: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.addQueryPrefix","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/add-query-prefix.html","searchKeys":["addQueryPrefix","val addQueryPrefix: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.addQueryPrefix"]},{"name":"val allowEmptyLists: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.allowEmptyLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/allow-empty-lists.html","searchKeys":["allowEmptyLists","val allowEmptyLists: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.allowEmptyLists"]},{"name":"val allowEmptyLists: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.allowEmptyLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/allow-empty-lists.html","searchKeys":["allowEmptyLists","val allowEmptyLists: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.allowEmptyLists"]},{"name":"val allowSparseLists: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.allowSparseLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/allow-sparse-lists.html","searchKeys":["allowSparseLists","val allowSparseLists: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.allowSparseLists"]},{"name":"val charset: Charset","description":"io.github.techouse.qskotlin.models.DecodeOptions.charset","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/charset.html","searchKeys":["charset","val charset: Charset","io.github.techouse.qskotlin.models.DecodeOptions.charset"]},{"name":"val charset: Charset","description":"io.github.techouse.qskotlin.models.EncodeOptions.charset","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/charset.html","searchKeys":["charset","val charset: Charset","io.github.techouse.qskotlin.models.EncodeOptions.charset"]},{"name":"val charsetSentinel: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.charsetSentinel","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/charset-sentinel.html","searchKeys":["charsetSentinel","val charsetSentinel: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.charsetSentinel"]},{"name":"val charsetSentinel: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.charsetSentinel","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/charset-sentinel.html","searchKeys":["charsetSentinel","val charsetSentinel: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.charsetSentinel"]},{"name":"val comma: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.comma","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/comma.html","searchKeys":["comma","val comma: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.comma"]},{"name":"val commaRoundTrip: Boolean?","description":"io.github.techouse.qskotlin.models.EncodeOptions.commaRoundTrip","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/comma-round-trip.html","searchKeys":["commaRoundTrip","val commaRoundTrip: Boolean?","io.github.techouse.qskotlin.models.EncodeOptions.commaRoundTrip"]},{"name":"val delimiter: Delimiter","description":"io.github.techouse.qskotlin.models.DecodeOptions.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/delimiter.html","searchKeys":["delimiter","val delimiter: Delimiter","io.github.techouse.qskotlin.models.DecodeOptions.delimiter"]},{"name":"val delimiter: StringDelimiter","description":"io.github.techouse.qskotlin.models.EncodeOptions.delimiter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/delimiter.html","searchKeys":["delimiter","val delimiter: StringDelimiter","io.github.techouse.qskotlin.models.EncodeOptions.delimiter"]},{"name":"val depth: Int","description":"io.github.techouse.qskotlin.models.DecodeOptions.depth","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/depth.html","searchKeys":["depth","val depth: Int","io.github.techouse.qskotlin.models.DecodeOptions.depth"]},{"name":"val duplicates: Duplicates","description":"io.github.techouse.qskotlin.models.DecodeOptions.duplicates","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/duplicates.html","searchKeys":["duplicates","val duplicates: Duplicates","io.github.techouse.qskotlin.models.DecodeOptions.duplicates"]},{"name":"val encode: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.encode","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/encode.html","searchKeys":["encode","val encode: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.encode"]},{"name":"val encodeDotInKeys: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.encodeDotInKeys","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/encode-dot-in-keys.html","searchKeys":["encodeDotInKeys","val encodeDotInKeys: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.encodeDotInKeys"]},{"name":"val encodeValuesOnly: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.encodeValuesOnly","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/encode-values-only.html","searchKeys":["encodeValuesOnly","val encodeValuesOnly: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.encodeValuesOnly"]},{"name":"val encoded: String","description":"io.github.techouse.qskotlin.enums.Sentinel.encoded","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/encoded.html","searchKeys":["encoded","val encoded: String","io.github.techouse.qskotlin.enums.Sentinel.encoded"]},{"name":"val entries: EnumEntries<DecodeKind>","description":"io.github.techouse.qskotlin.enums.DecodeKind.entries","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-decode-kind/entries.html","searchKeys":["entries","val entries: EnumEntries<DecodeKind>","io.github.techouse.qskotlin.enums.DecodeKind.entries"]},{"name":"val entries: EnumEntries<Duplicates>","description":"io.github.techouse.qskotlin.enums.Duplicates.entries","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-duplicates/entries.html","searchKeys":["entries","val entries: EnumEntries<Duplicates>","io.github.techouse.qskotlin.enums.Duplicates.entries"]},{"name":"val entries: EnumEntries<Format>","description":"io.github.techouse.qskotlin.enums.Format.entries","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/entries.html","searchKeys":["entries","val entries: EnumEntries<Format>","io.github.techouse.qskotlin.enums.Format.entries"]},{"name":"val entries: EnumEntries<ListFormat>","description":"io.github.techouse.qskotlin.enums.ListFormat.entries","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/entries.html","searchKeys":["entries","val entries: EnumEntries<ListFormat>","io.github.techouse.qskotlin.enums.ListFormat.entries"]},{"name":"val entries: EnumEntries<Sentinel>","description":"io.github.techouse.qskotlin.enums.Sentinel.entries","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/entries.html","searchKeys":["entries","val entries: EnumEntries<Sentinel>","io.github.techouse.qskotlin.enums.Sentinel.entries"]},{"name":"val filter: Filter?","description":"io.github.techouse.qskotlin.models.EncodeOptions.filter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/filter.html","searchKeys":["filter","val filter: Filter?","io.github.techouse.qskotlin.models.EncodeOptions.filter"]},{"name":"val flags: Int","description":"io.github.techouse.qskotlin.models.RegexDelimiter.flags","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/flags.html","searchKeys":["flags","val flags: Int","io.github.techouse.qskotlin.models.RegexDelimiter.flags"]},{"name":"val format: Format","description":"io.github.techouse.qskotlin.models.EncodeOptions.format","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/format.html","searchKeys":["format","val format: Format","io.github.techouse.qskotlin.models.EncodeOptions.format"]},{"name":"val formatter: Formatter","description":"io.github.techouse.qskotlin.enums.Format.formatter","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-format/formatter.html","searchKeys":["formatter","val formatter: Formatter","io.github.techouse.qskotlin.enums.Format.formatter"]},{"name":"val formatter: Formatter","description":"io.github.techouse.qskotlin.models.EncodeOptions.formatter","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/formatter.html","searchKeys":["formatter","val formatter: Formatter","io.github.techouse.qskotlin.models.EncodeOptions.formatter"]},{"name":"val function: (String, Any?) -> Any?","description":"io.github.techouse.qskotlin.models.FunctionFilter.function","location":"qs-kotlin/io.github.techouse.qskotlin.models/-function-filter/function.html","searchKeys":["function","val function: (String, Any?) -> Any?","io.github.techouse.qskotlin.models.FunctionFilter.function"]},{"name":"val generator: ListFormatGenerator","description":"io.github.techouse.qskotlin.enums.ListFormat.generator","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-list-format/generator.html","searchKeys":["generator","val generator: ListFormatGenerator","io.github.techouse.qskotlin.enums.ListFormat.generator"]},{"name":"val getAllowDots: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.getAllowDots","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/get-allow-dots.html","searchKeys":["getAllowDots","val getAllowDots: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.getAllowDots"]},{"name":"val getAllowDots: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.getAllowDots","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/get-allow-dots.html","searchKeys":["getAllowDots","val getAllowDots: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.getAllowDots"]},{"name":"val getDecodeDotInKeys: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.getDecodeDotInKeys","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/get-decode-dot-in-keys.html","searchKeys":["getDecodeDotInKeys","val getDecodeDotInKeys: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.getDecodeDotInKeys"]},{"name":"val getListFormat: ListFormat","description":"io.github.techouse.qskotlin.models.EncodeOptions.getListFormat","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/get-list-format.html","searchKeys":["getListFormat","val getListFormat: ListFormat","io.github.techouse.qskotlin.models.EncodeOptions.getListFormat"]},{"name":"val ignoreQueryPrefix: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.ignoreQueryPrefix","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/ignore-query-prefix.html","searchKeys":["ignoreQueryPrefix","val ignoreQueryPrefix: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.ignoreQueryPrefix"]},{"name":"val indices: Boolean?","description":"io.github.techouse.qskotlin.models.EncodeOptions.indices","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/indices.html","searchKeys":["indices","val indices: Boolean?","io.github.techouse.qskotlin.models.EncodeOptions.indices"]},{"name":"val interpretNumericEntities: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.interpretNumericEntities","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/interpret-numeric-entities.html","searchKeys":["interpretNumericEntities","val interpretNumericEntities: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.interpretNumericEntities"]},{"name":"val iterable: Iterable<*>","description":"io.github.techouse.qskotlin.models.IterableFilter.iterable","location":"qs-kotlin/io.github.techouse.qskotlin.models/-iterable-filter/iterable.html","searchKeys":["iterable","val iterable: Iterable<*>","io.github.techouse.qskotlin.models.IterableFilter.iterable"]},{"name":"val listLimit: Int","description":"io.github.techouse.qskotlin.models.DecodeOptions.listLimit","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/list-limit.html","searchKeys":["listLimit","val listLimit: Int","io.github.techouse.qskotlin.models.DecodeOptions.listLimit"]},{"name":"val parameterLimit: Int","description":"io.github.techouse.qskotlin.models.DecodeOptions.parameterLimit","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/parameter-limit.html","searchKeys":["parameterLimit","val parameterLimit: Int","io.github.techouse.qskotlin.models.DecodeOptions.parameterLimit"]},{"name":"val parseLists: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.parseLists","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/parse-lists.html","searchKeys":["parseLists","val parseLists: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.parseLists"]},{"name":"val pattern: String","description":"io.github.techouse.qskotlin.models.RegexDelimiter.pattern","location":"qs-kotlin/io.github.techouse.qskotlin.models/-regex-delimiter/pattern.html","searchKeys":["pattern","val pattern: String","io.github.techouse.qskotlin.models.RegexDelimiter.pattern"]},{"name":"val skipNulls: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.skipNulls","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/skip-nulls.html","searchKeys":["skipNulls","val skipNulls: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.skipNulls"]},{"name":"val sort: Sorter?","description":"io.github.techouse.qskotlin.models.EncodeOptions.sort","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/sort.html","searchKeys":["sort","val sort: Sorter?","io.github.techouse.qskotlin.models.EncodeOptions.sort"]},{"name":"val strictDepth: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.strictDepth","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/strict-depth.html","searchKeys":["strictDepth","val strictDepth: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.strictDepth"]},{"name":"val strictNullHandling: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.strictNullHandling","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/strict-null-handling.html","searchKeys":["strictNullHandling","val strictNullHandling: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.strictNullHandling"]},{"name":"val strictNullHandling: Boolean","description":"io.github.techouse.qskotlin.models.EncodeOptions.strictNullHandling","location":"qs-kotlin/io.github.techouse.qskotlin.models/-encode-options/strict-null-handling.html","searchKeys":["strictNullHandling","val strictNullHandling: Boolean","io.github.techouse.qskotlin.models.EncodeOptions.strictNullHandling"]},{"name":"val throwOnLimitExceeded: Boolean","description":"io.github.techouse.qskotlin.models.DecodeOptions.throwOnLimitExceeded","location":"qs-kotlin/io.github.techouse.qskotlin.models/-decode-options/throw-on-limit-exceeded.html","searchKeys":["throwOnLimitExceeded","val throwOnLimitExceeded: Boolean","io.github.techouse.qskotlin.models.DecodeOptions.throwOnLimitExceeded"]},{"name":"val value: String","description":"io.github.techouse.qskotlin.enums.Sentinel.value","location":"qs-kotlin/io.github.techouse.qskotlin.enums/-sentinel/value.html","searchKeys":["value","val value: String","io.github.techouse.qskotlin.enums.Sentinel.value"]},{"name":"val value: String","description":"io.github.techouse.qskotlin.models.StringDelimiter.value","location":"qs-kotlin/io.github.techouse.qskotlin.models/-string-delimiter/value.html","searchKeys":["value","val value: String","io.github.techouse.qskotlin.models.StringDelimiter.value"]}]